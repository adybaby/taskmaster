/* eslint-disable no-nested-ternary */
import React, { useState } from 'react';
import {
  FlexibleWidthXYPlot,
  VerticalRectSeries,
  ContinuousColorLegend,
  HorizontalGridLines,
  XAxis,
  YAxis,
  Crosshair
} from 'react-vis';
import { useSelector } from 'react-redux';
import '../../../node_modules/react-vis/dist/style.css';
import Paper from '@material-ui/core/Paper';
import { makeStyles } from '@material-ui/core/styles';
import { Typography, Divider, Tooltip } from '@material-ui/core';
import { Link as RouterLink } from 'react-router-dom';
import { calculateResourceChartData } from '../../redux/selectors/ResourceChartDataSelector';
import { formatDate } from '../../util/DateFormatting';
import styles from '../../styles/Styles';
import { VacancyDates } from '../fragments/Vacancies';

const useStyles = makeStyles(theme => styles(theme));

const BarChart = ({ title, totalsTitle, showVacancies, showSignUps, selector, field }) => {
  const classes = useStyles();
  const skills = useSelector(calculateResourceChartData).skillsAndColors.map(s => s.title);
  const tickValues = [];
  const [xTarget, setXTarget] = useState(null);
  const [yTarget, setYTarget] = useState(null);
  const [crosshairValues, setCrosshairValues] = useState([]);
  const seriesSet = useSelector(selector)[field];
  const [mouseX, setMouseX] = useState(null);
  const [mouseY, setMouseY] = useState(null);

  for (let i = 0; i < skills.length; i++) {
    tickValues.push(i + 0.5);
  }

  const tickFormat = (t, i) => {
    return skills[i];
  };

  const handleMouseOver = (datapoint, event) => {
    console.log(event);
    console.log(event.target);
    console.log(event.nativeEvent);
    console.log(`${event.screenX} , ${event.screenY}`);
    console.log(event.target);
    setCrosshairValues([
      {
        x: datapoint.x,
        y: datapoint.y,
        date: new Date(datapoint.x),
        total: datapoint.total,
        vacancies: datapoint.vacancies,
        signUps: datapoint.signUps
      }
    ]);
    setXTarget(datapoint.x);
    setYTarget(datapoint.y);
  };

  const makeSeries = (series, index) => (
    <VerticalRectSeries
      key={index}
      data={series.data.map(d => ({
        x: d.x,
        x0: d.x + 86400000,
        y: index + 0.9,
        y0: index + 0.1,
        color: xTarget === d.x && yTarget === index + 0.9 ? -99 : d.y,
        total: d.y,
        vacancies: d.vacancies,
        signUps: d.signUps
      }))}
      onValueMouseOver={(datapoint, event) => {
        console.log(event);
        console.log(event.target);
        console.log(event.nativeEvent);
        console.log(`${event.screenX} , ${event.screenY}`);
        console.log(event.target);
        setCrosshairValues([
          {
            x: datapoint.x,
            y: datapoint.y,
            date: new Date(datapoint.x),
            total: datapoint.total,
            vacancies: datapoint.vacancies,
            signUps: datapoint.signUps
          }
        ]);
        setXTarget(datapoint.x);
        setYTarget(datapoint.y);
      }}
    />
  );

  const makeVacanciesBlock = vacancies => (
    <Typography variant="body2">
      <b>Initiatives</b>
      <br />

      {vacancies.map((v, index) => (
        <React.Fragment key={index}>
          {v.count} required for <RouterLink to={`/task/${v.task.id}`}>{v.task.title}</RouterLink>
          {Array.isArray(v.vacancy.date) ? (
            <>
              {` `}
              <VacancyDates dates={v.vacancy.date} noUser={true} />
            </>
          ) : null}
          <br />
        </React.Fragment>
      ))}
    </Typography>
  );

  const makeSignUpsBlock = signUps => (
    <Typography variant="body2">
      <b>{signUps[0].signUp === null ? 'Availability' : 'Sign-Ups'}</b>
      <br />

      {signUps.map((su, index) => (
        <React.Fragment key={index}>
          <RouterLink to={`/profile/${su.user.id}`}>{su.user.name}</RouterLink>
          {' - '}
          {su.signUp === null ? (
            Array.isArray(su.user.available) ? (
              <>
                {` `}
                <VacancyDates dates={su.user.available} noUser={true} />
              </>
            ) : null
          ) : (
            <>
              <RouterLink to={`/task/${su.signUp.id}`}>{su.signUp.title}</RouterLink>
              {Array.isArray(su.signUp.periods) ? (
                <>
                  {` `}
                  <VacancyDates dates={su.signUp.periods} noUser={true} />
                </>
              ) : null}
            </>
          )}
          <br />
        </React.Fragment>
      ))}
    </Typography>
  );

  const makeCrossHair = () => (
    <Crosshair values={crosshairValues}>
      {crosshairValues.length === 0 ? null : (
        <Paper>
          <Typography variant="subtitle1" className={classes.chartTooltip}>
            {formatDate(crosshairValues[0].date)} ({crosshairValues[0].total} {totalsTitle})
          </Typography>
          {showVacancies && crosshairValues[0].vacancies.length > 0 ? (
            <>
              <Divider />
              <div className={classes.chartTooltip}>
                {makeVacanciesBlock(crosshairValues[0].vacancies)}
              </div>
            </>
          ) : null}
          {showSignUps && crosshairValues[0].signUps.length > 0 ? (
            <>
              <Divider />
              <div className={classes.chartTooltip}>
                {makeSignUpsBlock(crosshairValues[0].signUps)}
              </div>
            </>
          ) : null}
        </Paper>
      )}
    </Crosshair>
  );

  const makeLegend = () => (
    <ContinuousColorLegend
      startColor={'#FFFFFF'}
      endColor={'#33ACFF'}
      width={400}
      startTitle={seriesSet.min}
      midTitle={Math.floor(seriesSet.max / 2)}
      endTitle={seriesSet.max}
    />
  );

  return (
    <>
      <h3>{title}</h3>
      <div>
        <div
          style={{
            position: 'absolute',
            left: `${Math.floor(mouseX)}px`,
            top: `${Math.floor(mouseY)}px`,
            zIndex: 99999
          }}
        >
          {crosshairValues.length === 0 ? null : (
            <Paper>
              <Typography variant="subtitle1" className={classes.chartTooltip}>
                {formatDate(crosshairValues[0].date)} ({crosshairValues[0].total} {totalsTitle})
              </Typography>
              {showVacancies && crosshairValues[0].vacancies.length > 0 ? (
                <>
                  <Divider />
                  <div className={classes.chartTooltip}>
                    {makeVacanciesBlock(crosshairValues[0].vacancies)}
                  </div>
                </>
              ) : null}
              {showSignUps && crosshairValues[0].signUps.length > 0 ? (
                <>
                  <Divider />
                  <div className={classes.chartTooltip}>
                    {makeSignUpsBlock(crosshairValues[0].signUps)}
                  </div>
                </>
              ) : null}
            </Paper>
          )}
        </div>

        <div
          style={{
            position: 'absolute',
            left: `400px`,
            top: `400px`,
            zIndex: 888
          }}
        >
          BOOOOM
        </div>
        <FlexibleWidthXYPlot
          margin={{ left: 100 }}
          colorRange={['#FFA500', '#FFFFFF', '#33ACFF']}
          colorDomain={[-99, seriesSet.min, seriesSet.max]}
          xType="time"
          height={800}
          onMouseLeave={() => {
            setMouseX(null);
            setMouseY(null);
            setXTarget(null);
            setYTarget(null);
            setCrosshairValues([]);
          }}
          onMouseMove={event => {
            const { left } = event.target.getClientRects()[0];
            const { top } = event.target.getClientRects()[0];
            console.log(`${left}:${top}`);
            console.log(`OMM ${event.screenX},${event.screenY}`);
            setMouseX(left);
            setMouseY(top);
          }}
        >
          <HorizontalGridLines />
          <XAxis />
          <YAxis tickFormat={tickFormat} tickValues={tickValues} />
          {seriesSet.map((series, index) => (
            <VerticalRectSeries
              key={index}
              data={series.data.map(d => ({
                x: d.x,
                x0: d.x + 86400000,
                y: index + 0.9,
                y0: index + 0.1,
                color: xTarget === d.x && yTarget === index + 0.9 ? -99 : d.y,
                total: d.y,
                vacancies: d.vacancies,
                signUps: d.signUps
              }))}
              onValueMouseOver={datapoint => {
                console.log(`VMO ${mouseX},${mouseY}`);
                setCrosshairValues([
                  {
                    x: datapoint.x,
                    y: datapoint.y,
                    date: new Date(datapoint.x),
                    total: datapoint.total,
                    vacancies: datapoint.vacancies,
                    signUps: datapoint.signUps
                  }
                ]);
                setXTarget(datapoint.x);
                setYTarget(datapoint.y);
              }}
            />
          ))}
        </FlexibleWidthXYPlot>
        <div style={{ paddingLeft: '100px', paddingTop: '20px' }}>{makeLegend()}</div>
      </div>
    </>
  );
};

export const getVacancyChart = () => (
  <BarChart
    title="Vacancies"
    selector={calculateResourceChartData}
    field={'vacancies'}
    totalsTitle="Vacancies"
    showVacancies={true}
  />
);
